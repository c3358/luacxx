=head1 NAME

Lua-cxx Qt support

=head1 SYNOPSIS

    #include <luacxx/stack.hpp>

    #include <QWindow>

    int QWindow_new(lua_State* const state)
    {
        if (lua_gettop(state) > 1) {
            auto parent = lua::get<QObject*>(state, 2);
            lua_settop(state, 0);

            if (parent) {
                if (parent->inherits("QWindow")) {
                    lua::make<QWindow>(state, static_cast<QWindow*>(parent));
                } else {
                    lua::make<QWindow>(state, static_cast<QScreen*>(parent));
                }
                return 1;
            }

            // Otherwise, fall through
        }

        // Create a QWindow within Lua
        lua::make<QWindow>(state, static_cast<QWindow*>(nullptr));
        return 1;
    }

    int luaopen_QWindow(lua_State* const state)
    {
        lua::thread env(state);

        env["QWindow"] = lua::value::table;
        env["QWindow"]["new"] = QWindow_new;

        return 1;
    }

    // Within Lua

    require "QWindow";

    local window = QWindow:new();
    window:setWidth(300);
    window:setHeight(300);
    window.title = "Hello, world";
    window:show();

=head1 DESCRIPTION

Lua-cxx maintains bindings for much of Qt's Core and GUI modules as well as
direct support for QObject-derived classes.

=head2 QObjects

This allows all objects that derive from QObject to automatically expose their
properties, signals, and slots, as well as any methods prefixed with
Q_INVOKABLE. These methods can have any signature as long as each type is
supported by this library and lua::Push<> struct specializations.

=head2 Translation rules

Lua-cxx makes as few modifications to the original API as possible. This
minimizes the burden on the programmer by eliminating their need to learn this
library's changes. As a result, naming conventions, parameter lists, and other
stylistic decisions are not modified unless it becomes necessary to do so.
This approach greatly simplifies the creation and maintenance of object
bindings.

For C++ objects, a binding can easily be created manually by creating a
lua::Metatable<> specialization, as shown:

    namespace lua {

    void QPainter_metatable(lua_State* const state, const int pos);

    template <>
    struct Metatable<QPainter>
    {
        static const userdata_type& info()
        {
            static userdata_type _info("QPainter");
            if (!_info.has_casts()) {
                _info.add_cast<QPainter>();
            }
            return _info;
        }
        static constexpr const char* name = "QPainter";

        static bool metatable(lua_State* const state, const int pos, QPainter* const)
        {
            lua::QPainter_metatable(state, pos);
            return true;
        }
    };

    }

The metatable will be used to expose behavior to Lua. By default, Lua-cxx's
metatable will be used as its own index, so methods can be assigned directly
to it to add behavior:

    void lua::QPainter_metatable(const lua::index& mt)
    {
        // Add all public QPainter methods
        mt["background"] = &QPainter::background;
        mt["backgroundMode"] = &QPainter::backgroundMode;
        mt["begin"] = &QPainter::begin;
        mt["beginNativePainting"] = &QPainter::beginNativePainting;

        // ... etc ...

        mt["window"] = &QPainter::window;
        mt["worldMatrixEnabled"] = &QPainter::worldMatrixEnabled;
        mt["worldTransform"] = &QPainter::worldTransform;
    }

Overloaded methods cannot be assigned exactly, as they would be ambiguous. Therefore,
a separate method should be created to determine the correct method:

    int QPainter_fillRect(lua_State* const state)
    {
        auto painter = lua::get<QPainter*>(state, 1);

        // Determine the method to call
        switch (lua_gettop(state)) {
        case 2:
            painter->fillRect(
                lua::get<int>(state, 2),
                lua::get<int>(state, 3),
                lua::get<int>(state, 4),
                lua::get<int>(state, 5),
            );
            break;
        default:
        }
    }

    // Added to QPainter_metatable
    mt["fillRect"] = QPainter_fillRect;

Some Qt methods use signatures like (int*, int*, int*, int*) to return multiple
values. These methods should simply return those values on the stack.

In the rare case that a name collision occurs, a new name should be made. For
instance, "end" is a keyword in Lua, so it cannot be natively used as a
function name.

In cases where a property name collides with a method, the method is preferred. For
instance, QWindow has a width property, but it also has a width method. In this and all
other cases, the method should shadow the property.

=head1 SEE ALSO

B<QtCore C++ classes> - https://qt-project.org/doc/qt-5/qtcore-module.html
B<QtGui C++ classes> - https://qt-project.org/doc/qt-5/qtgui-module.html
